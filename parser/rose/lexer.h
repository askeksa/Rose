/* This file was generated by SableCC (http://www.sablecc.org/). */

#ifndef __rose__lexer_hh__
#define __rose__lexer_hh__

#include <iostream>
#include <fstream>
#include <streambuf>
#include <ios>

#include <stack>
#include <vector>

namespace rose {

class StreamReader {
public:
  inline StreamReader (std::streambuf *inbuf, bool do_delete = false)
      : inbuf (inbuf), do_delete(do_delete), eof(false) { }

  StreamReader (const std::string& path);

  inline ~StreamReader () { if ( do_delete ) delete inbuf; }

  inline int get ()
  {
    if ( !stack.empty() ) {
        int ret = stack.top();
        stack.pop();
        return ret;
    } else if ( !eof ) {
        int n = inbuf->sbumpc();
        if ( n == -1 ) eof = true;
        return n;
    } else {
        return -1;
    }
  }

  inline int peek () const { return stack.empty() ? inbuf->sgetc() : stack.top(); }
  inline void unget (int value) { stack.push (value); }
  operator bool () { return !stack.empty() || peek() != std::streambuf::traits_type::eof(); }
  bool is_open () { return *this; }

private:
  std::streambuf *inbuf;
  std::stack<int> stack;
  bool do_delete;
  bool eof;
};

class Lexer {
public:
  /**
    * Create a new Lexer object reading input from stream_reader.
    * @param stream_reader StreamReader object where from to read input
    * @param own_reader whether we own the reader and delete on our destruction
    */
  Lexer (StreamReader* stream_reader, bool own_reader = false);
  Lexer (const std::string& path);
  virtual ~Lexer ();

  virtual Token peek ();
  virtual Token next ();

  enum State {
    INITIAL = 0,
  };

protected:
  Token getToken();
  virtual void filter ();
  void unread (Token token);

private:
  StreamReader* stream_reader;
  bool own_reader;

  int line;
  int pos;
  bool cr;

  Token token;
  State state;
  std::vector<int> text;
};

class LexerException : public Exception {
public:
  inline LexerException (int line, int pos, const std::string& msg) : Exception (msg), line(line), pos(pos) { }
  inline int getPos () const { return pos; }
  inline int getLine () const { return line; }

private:
  int line;
  int pos;
};

} // namespace rose {

#endif // !__rose__lexer_hh__
